/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: pack1.proto */

#ifndef PROTOBUF_C_pack1_2eproto__INCLUDED
#define PROTOBUF_C_pack1_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "pack2.pb-c.h"

typedef struct Pack1__Pack1Msg Pack1__Pack1Msg;
typedef struct Pack1__Pack2Msg Pack1__Pack2Msg;
typedef struct Pack1__Pack3Msg Pack1__Pack3Msg;


/* --- enums --- */


/* --- messages --- */

struct  Pack1__Pack1Msg
{
  ProtobufCMessage base;
  int64_t pack1_msg_value1;
  int64_t pack1_msg_value2;
};
#define PACK1__PACK1_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pack1__pack1_msg__descriptor) \
, 0, 0 }


struct  Pack1__Pack2Msg
{
  ProtobufCMessage base;
  int64_t pack1_pack2_msg_value1;
  int64_t pack1_pack2_msg_value2;
};
#define PACK1__PACK2_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pack1__pack2_msg__descriptor) \
, 0, 0 }


struct  Pack1__Pack3Msg
{
  ProtobufCMessage base;
  Pack1__Pack2Msg *pack2_msg_value1;
  Pack2__Pack2Msg *pack2_msg_value2;
};
#define PACK1__PACK3_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pack1__pack3_msg__descriptor) \
, NULL, NULL }


/* Pack1__Pack1Msg methods */
void   pack1__pack1_msg__init
                     (Pack1__Pack1Msg         *message);
size_t pack1__pack1_msg__get_packed_size
                     (const Pack1__Pack1Msg   *message);
size_t pack1__pack1_msg__pack
                     (const Pack1__Pack1Msg   *message,
                      uint8_t             *out);
size_t pack1__pack1_msg__pack_to_buffer
                     (const Pack1__Pack1Msg   *message,
                      ProtobufCBuffer     *buffer);
Pack1__Pack1Msg *
       pack1__pack1_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pack1__pack1_msg__free_unpacked
                     (Pack1__Pack1Msg *message,
                      ProtobufCAllocator *allocator);
/* Pack1__Pack2Msg methods */
void   pack1__pack2_msg__init
                     (Pack1__Pack2Msg         *message);
size_t pack1__pack2_msg__get_packed_size
                     (const Pack1__Pack2Msg   *message);
size_t pack1__pack2_msg__pack
                     (const Pack1__Pack2Msg   *message,
                      uint8_t             *out);
size_t pack1__pack2_msg__pack_to_buffer
                     (const Pack1__Pack2Msg   *message,
                      ProtobufCBuffer     *buffer);
Pack1__Pack2Msg *
       pack1__pack2_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pack1__pack2_msg__free_unpacked
                     (Pack1__Pack2Msg *message,
                      ProtobufCAllocator *allocator);
/* Pack1__Pack3Msg methods */
void   pack1__pack3_msg__init
                     (Pack1__Pack3Msg         *message);
size_t pack1__pack3_msg__get_packed_size
                     (const Pack1__Pack3Msg   *message);
size_t pack1__pack3_msg__pack
                     (const Pack1__Pack3Msg   *message,
                      uint8_t             *out);
size_t pack1__pack3_msg__pack_to_buffer
                     (const Pack1__Pack3Msg   *message,
                      ProtobufCBuffer     *buffer);
Pack1__Pack3Msg *
       pack1__pack3_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pack1__pack3_msg__free_unpacked
                     (Pack1__Pack3Msg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Pack1__Pack1Msg_Closure)
                 (const Pack1__Pack1Msg *message,
                  void *closure_data);
typedef void (*Pack1__Pack2Msg_Closure)
                 (const Pack1__Pack2Msg *message,
                  void *closure_data);
typedef void (*Pack1__Pack3Msg_Closure)
                 (const Pack1__Pack3Msg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor pack1__pack1_msg__descriptor;
extern const ProtobufCMessageDescriptor pack1__pack2_msg__descriptor;
extern const ProtobufCMessageDescriptor pack1__pack3_msg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_pack1_2eproto__INCLUDED */
