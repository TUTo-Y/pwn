32位arm:arm
64位arm:aarch64

32位arm的调试
qemu-arm -g 1234 -L /usr/arm-linux-gnueabi ./arm

64位arm的调试
qemu-aarch64 -g 1234 -L /usr/aarch64-linux-gnu ./aarch64

32位arm的pwntools
p = process(['qemu-arm', '-g', '1234', '-L', '/usr/arm-linux-gnueabi', './arm'])

64位arm的pwntools
p = process(['qemu-aarch64', '-g', '1234', '-L', '/usr/aarch64-linux-gnu', './aarch64'])





arm
arm架构下的寄存器和x86_64架构还是有很大区别的，其中R0 ~ R3是用来依次传递参数的，相当于x64下的rdi, rsi, rdx，R0还被用于存储函数的返回值，R7常用来存放系统调用号，R11是栈帧，相当于ebp，在arm中也被叫作FP，相应地，R13是栈顶，相当于esp，在arm中也被叫作SP，R14(LP)是用来存放函数的返回地址的，R15相当于eip，在arm中被叫作PC，但是在程序运行的过程中，PC存储着当前指令往后两条指令的位置，在arm架构中并不是像x86_64那样用ret返回，而是直接pop {PC}。

在arm中的ldr和str指令是必须清楚的，其中ld就是load（加载），st就是store（存储），而r自然就是register（寄存器），搞明白这些以后，这两个指令就很容易理解了（cond为条件）：

LDR {cond} Rd, <addr>：加载指定地址(addr)上的数据(字)，放入到Rd寄存器中。

STR {cond} Rd, <addr>：将Rd寄存器中的数据(字)存储到指定地址(addr)中。

当然，这两个指令有很多种写法，灵活多变：

str r2, [r1, #2]：寄存器r2中的值被存放到寄存器r1中的地址加2处的地址中，r1寄存器中的值不变;

str r2, [r1, #2]!：与上一条一样，不过最后r1 += 4，这里的{!}是可选后缀，若选用该后缀，则表示请求回写，也就是当数据传送完毕之后，将最后的地址写入到基址寄存器(Rn)中;

ldr r2, [r1], #-2：将r1寄存器里地址中的值给r2寄存器，最后r1 -= 2；

上面的立即数或者寄存器也类似，此外还可以有这些写法：

str r2, [r1, r3, LSL#2]：将寄存器r2中的值存储到寄存器r1中的地址加上r3寄存器中的值左移两位后的值所指向的地址中；

ldr r2, [r1], r3, LSL#2：将r1寄存器里地址中的值给r2寄存器，最后r1 += r3 << 2.

在arm中仍有mov指令，通常用于寄存器与寄存器间的数据传输，也可以传递立即数。

mov r1, #0x10：r1 = 0x10

mov r1, r2：r1 = r2

mov r1, r2, LSL#2：r1 = r2 << 2

由此可见，ldr和str指令通常用于寄存器与内存间的数据传递，其中会通过另一个寄存器作为中介，而mov指令则是通常用于两个寄存器之间数值的传递。

此外，还有数据块传输指令LDM, STM，具体请参考：arm汇编指令之数据块传输（LDM,STM）详解。

其中提到了STMFD和LDMFD指令，可用作压栈和弹栈，如STMFD SP! ,{R0-R7，LR}和LDMFD SP! ,{R0-R7，LR}，但是在我们拿到的CTF题目中，常见的仍是push {}和pop {}指令。

还需要知道的是add和sub命令：

add r1, r2, #2 相当于 r1 = r2 + 2；

sub r1, r2, r3 相当于 r1 = r2 - r3.

还有跳转指令B相关的一些指令，相当于jmp：

B Label：无条件跳转到Label处；

BL Label：当程序跳转到标号Label处执行时，同时将当前的PC值保存到R14中；

BX Label：这里需要先提一下arm指令压缩形式的子集Thumb指令了，不像是arm指令是一条四个字节，Thumb指令一条两个字节，arm对应的cpu工作状态位为0，而Thumb对应的cpu工作状态位为1，我们从其中一个指令集跳到另外一个指令集的时候，需要同时修改其对应的cpu工作状态位，不然会报invalid instrument错误，当BX后面的地址值最后一个bit为1时，则转为Thumb模式，否则转为arm模式，直接pop {pc}这样跳转也有这种特性；

BLX Label：就是BL + BX指令共同作用的效果。

位运算命令：and orr eor 分别是 按位与、或、异或。

aarch64
aarch64和arm架构相比，还是有一些汇编指令上的区别的：

首先仍是寄存器，在64位下都叫作Xn寄存器了，其对应的低32位叫作Wn寄存器，其中栈顶是X31(SP)寄存器，栈帧是X29(FP)寄存器，X0 ~ X7用来依次传递参数，X0存放着函数返回值，X8常用来存放系统调用号或一些函数的返回结果，X32是PC寄存器，X30存放着函数的返回地址(aarch64中的RET指令返回X30寄存器中存放的地址)。

然后是跳转指令，仍有B，BL指令，新增了BR指令（向寄存器中的地址跳转），BLR组合指令。
还有一些带判断的跳转指令：b.ne是不等则跳转，b.eq是等于则跳转，b.le是大于则跳转，b.ge是小于则跳转，b.lt是大于等于则跳转，b.gt是小于等于则跳转，cbz为结果等于零则跳转，cbnz为结果非零则跳转...

在aarch64架构下的一大变化就是，不再使用push和pop指令压栈和弹栈了，也没有LDM和STM指令，而是使用STP和LDP指令：

STP x4, x5, [sp, #0x20]：将sp+0x20处依次覆盖为x4，x5，即x4入栈到sp+0x20，x5入栈到sp+0x28，最后sp的位置不变。

LDP x29, x30, [sp], #0x40：将sp弹栈到x29，sp+0x8弹栈到x30，最后sp += 0x40。

其中，STP和LDP中的P是pair（一对）的意思，也就是说，仅可以同时读/写两个寄存器。